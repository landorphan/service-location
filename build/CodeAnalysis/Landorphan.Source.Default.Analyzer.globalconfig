# global analyzer config files can have any name, and any extension, but must be specifically referenced in the project file.
# the only requirement is the line:  "is_global = true"
# use of [*.{cs}] is not allowed
is_global = true

#
# Targeting MS and Sonar Analyzers for C#
#

#
# MS analyzer rules
#
# CA1000: Do not declare static members on generic types
dotnet_diagnostic.CA1000.severity = warning

# CA1001: Types that own disposable fields should be disposable
dotnet_diagnostic.CA1001.severity = warning

# CA1002: Do not expose generic lists
dotnet_diagnostic.CA1002.severity = warning

# CA1003: Use generic event handler instances
dotnet_diagnostic.CA1003.severity = warning

# CA1005: Avoid excessive parameters on generic types
dotnet_diagnostic.CA1005.severity = warning

# CA1008: Enums should have zero value
dotnet_diagnostic.CA1008.severity = warning

# CA1010: Generic interface should also be implemented
dotnet_diagnostic.CA1010.severity = warning

# CA1012: Abstract types should not have public constructors
dotnet_diagnostic.CA1012.severity = warning

# CA1014: Mark assemblies with CLSCompliant
dotnet_diagnostic.CA1014.severity = warning

# CA1016: Mark assemblies with assembly version
dotnet_diagnostic.CA1016.severity = warning

# CA1017: Mark assemblies with ComVisible
dotnet_diagnostic.CA1017.severity = warning

# CA1018: Mark attributes with AttributeUsageAttribute
dotnet_diagnostic.CA1018.severity = warning

# CA1019: Define accessors for attribute arguments
dotnet_diagnostic.CA1019.severity = warning

# CA1021: Avoid out parameters
# Initial justification: for advanced APIs out parameters avoid the creation of many classes.  Show example when documented.  (mwp)
dotnet_diagnostic.CA1021.severity = none

# CA1024: Use properties where appropriate
# Initial justification: this is a developer judgement call, see https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1024 specifically when to suppress warnings.
# as such, it is inappropriate for a rule that will break the build. (mwp)
dotnet_diagnostic.CA1024.severity = none

# CA1027: Mark enums with FlagsAttribute
dotnet_diagnostic.CA1027.severity = warning

# CA1028: Enum Storage should be Int32
dotnet_diagnostic.CA1028.severity = warning

# CA1030: Use events where appropriate
dotnet_diagnostic.CA1030.severity = warning

# CA1031: Do not catch general exception types
dotnet_diagnostic.CA1031.severity = warning

# CA1032: Implement standard exception constructors
dotnet_diagnostic.CA1032.severity = warning

# CA1033: Interface methods should be callable by child types
dotnet_diagnostic.CA1033.severity = warning

# CA1034: Nested types should not be visible
dotnet_diagnostic.CA1034.severity = warning

# CA1036: Override methods on comparable types
dotnet_diagnostic.CA1036.severity = warning

# CA1040: Avoid empty interfaces
# Initial justification: we build APIs against interfaces, not concrete types.  In some situations "I am a member" interfaces are used to declare generic capacity.
dotnet_diagnostic.CA1040.severity = none

# CA1041: Provide ObsoleteAttribute message
dotnet_diagnostic.CA1041.severity = warning

# CA1043: Use Integral Or String Argument For Indexers
dotnet_diagnostic.CA1043.severity = warning

# CA1044: Properties should not be write only
dotnet_diagnostic.CA1044.severity = warning

# CA1045: Do not pass types by reference
dotnet_diagnostic.CA1045.severity = warning

# CA1046: Do not overload equality operator on reference types
dotnet_diagnostic.CA1046.severity = warning

# CA1047: Do not declare protected member in sealed type
dotnet_diagnostic.CA1047.severity = warning

# CA1050: Declare types in namespaces
dotnet_diagnostic.CA1050.severity = warning

# CA1051: Do not declare visible instance fields
dotnet_diagnostic.CA1051.severity = warning

# CA1052: Static holder types should be Static or NotInheritable
dotnet_diagnostic.CA1052.severity = warning

# CA1054: URI-like parameters should not be strings
dotnet_diagnostic.CA1054.severity = warning

# CA1055: URI-like return values should not be strings
dotnet_diagnostic.CA1055.severity = warning

# CA1056: URI-like properties should not be strings
dotnet_diagnostic.CA1056.severity = warning

# CA1058: Types should not extend certain base types
dotnet_diagnostic.CA1058.severity = warning

# CA1060: Move pinvokes to native methods class
dotnet_diagnostic.CA1060.severity = warning

# CA1061: Do not hide base class methods
dotnet_diagnostic.CA1061.severity = warning

# CA1062: Validate arguments of public methods
dotnet_diagnostic.CA1062.severity = warning

# CA1063: Implement IDisposable Correctly
# Initial Justification:  Our reusable implementation DisposableObject violates this rule and has been reviewed. (mwp)
dotnet_diagnostic.CA1063.severity = none

# CA1064: Exceptions should be public
dotnet_diagnostic.CA1064.severity = warning

# CA1065: Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA1065.severity = warning

# CA1066: Implement IEquatable when overriding Object.Equals
dotnet_diagnostic.CA1066.severity = warning

# CA1067: Override Object.Equals(object) when implementing IEquatable<T>
dotnet_diagnostic.CA1067.severity = warning

# CA1068: CancellationToken parameters must come last
dotnet_diagnostic.CA1068.severity = warning

# CA1069: Enums values should not be duplicated
dotnet_diagnostic.CA1069.severity = warning

# CA1070: Do not declare event fields as virtual
dotnet_diagnostic.CA1070.severity = warning

# CA1200: Avoid using cref tags with a prefix
dotnet_diagnostic.CA1200.severity = warning

# CA1303: Do not pass literals as localized parameters
dotnet_diagnostic.CA1303.severity = warning

# CA1304: Specify CultureInfo
dotnet_diagnostic.CA1304.severity = warning

# CA1305: Specify IFormatProvider
dotnet_diagnostic.CA1305.severity = warning

# CA1307: Specify StringComparison for clarity
dotnet_diagnostic.CA1307.severity = warning

# CA1308: Normalize strings to uppercase
dotnet_diagnostic.CA1308.severity = warning

# CA1309: Use ordinal string comparison
dotnet_diagnostic.CA1309.severity = warning

# CA1310: Specify StringComparison for correctness
dotnet_diagnostic.CA1310.severity = warning

# CA1401: P/Invokes should not be visible
dotnet_diagnostic.CA1401.severity = warning

# CA1416: Validate platform compatibility
dotnet_diagnostic.CA1416.severity = warning

# CA1417: Do not use 'OutAttribute' on string parameters for P/Invokes
dotnet_diagnostic.CA1417.severity = warning

# CA1418: Use valid platform string
dotnet_diagnostic.CA1418.severity = warning

# CA1419: Provide a parameterless constructor that is as visible as the containing type for concrete types derived from 'System.Runtime.InteropServices.SafeHandle'
dotnet_diagnostic.CA1419.severity = warning

# CA1501: Avoid excessive inheritance
dotnet_diagnostic.CA1501.severity = warning

# CA1502: Avoid excessive complexity
dotnet_diagnostic.CA1502.severity = warning

# CA1505: Avoid unmaintainable code
dotnet_diagnostic.CA1505.severity = warning

# CA1506: Avoid excessive class coupling
dotnet_diagnostic.CA1506.severity = warning

# CA1507: Use nameof to express symbol names
dotnet_diagnostic.CA1507.severity = warning

# CA1508: Avoid dead conditional code
dotnet_diagnostic.CA1508.severity = warning

# CA1509: Invalid entry in code metrics rule specification file
dotnet_diagnostic.CA1509.severity = warning

# CA1700: Do not name enum values 'Reserved'
dotnet_diagnostic.CA1700.severity = warning

# CA1707: Identifiers should not contain underscores
dotnet_diagnostic.CA1707.severity = warning

# CA1708: Identifiers should differ by more than case
dotnet_diagnostic.CA1708.severity = warning

# CA1710: Identifiers should have correct suffix
dotnet_diagnostic.CA1710.severity = warning

# CA1711: Identifiers should not have incorrect suffix
dotnet_diagnostic.CA1711.severity = warning

# CA1712: Do not prefix enum values with type name
dotnet_diagnostic.CA1712.severity = warning

# CA1713: Events should not have 'Before' or 'After' prefix
dotnet_diagnostic.CA1713.severity = none

# CA1715: Identifiers should have correct prefix
dotnet_diagnostic.CA1715.severity = warning

# CA1716: Identifiers should not match keywords
dotnet_diagnostic.CA1716.severity = warning

# CA1720: Identifier contains type name
dotnet_diagnostic.CA1720.severity = warning

# CA1721: Property names should not match get methods
dotnet_diagnostic.CA1721.severity = warning

# CA1724: Type names should not match namespaces
dotnet_diagnostic.CA1724.severity = warning

# CA1725: Parameter names should match base declaration
dotnet_diagnostic.CA1725.severity = warning

# CA1727: Use PascalCase for named placeholders
dotnet_diagnostic.CA1727.severity = warning

# CA1802: Use literals where appropriate
dotnet_diagnostic.CA1802.severity = warning

# CA1805: Do not initialize unnecessarily
dotnet_diagnostic.CA1805.severity = none

# CA1806: Do not ignore method results
dotnet_diagnostic.CA1806.severity = warning

# CA1810: Initialize reference type static fields in-line
dotnet_diagnostic.CA1810.severity = warning

# CA1812: Avoid uninstantiated internal classes
dotnet_diagnostic.CA1812.severity = warning

# CA1813: Avoid unsealed attributes
dotnet_diagnostic.CA1813.severity = warning

# CA1814: Prefer jagged arrays over multidimensional
dotnet_diagnostic.CA1814.severity = warning

# CA1815: Override equals and operator equals on value types
dotnet_diagnostic.CA1815.severity = warning

# CA1816: Dispose methods should call SuppressFinalize
dotnet_diagnostic.CA1816.severity = warning

# CA1819: Properties should not return arrays
dotnet_diagnostic.CA1819.severity = warning

# CA1820: Test for empty strings using string length
dotnet_diagnostic.CA1820.severity = warning

# CA1821: Remove empty Finalizers
dotnet_diagnostic.CA1821.severity = warning

# CA1822: Mark members as static
# Initial justification:  this is a performance rule of marginal value that does not contemplate side effects such as implementation of an interface method (mwp).
dotnet_diagnostic.CA1822.severity = none

# CA1823: Avoid unused private fields
dotnet_diagnostic.CA1823.severity = warning

# CA1824: Mark assemblies with NeutralResourcesLanguageAttribute
dotnet_diagnostic.CA1824.severity = warning

# CA1825: Avoid zero-length array allocations
dotnet_diagnostic.CA1825.severity = warning

# CA1826: Do not use Enumerable methods on indexable collections
dotnet_diagnostic.CA1826.severity = warning

# CA1827: Do not use Count() or LongCount() when Any() can be used
dotnet_diagnostic.CA1827.severity = warning

# CA1828: Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used
dotnet_diagnostic.CA1828.severity = warning

# CA1829: Use Length/Count property instead of Count() when available
dotnet_diagnostic.CA1829.severity = warning

# CA1830: Prefer strongly-typed Append and Insert method overloads on StringBuilder
dotnet_diagnostic.CA1830.severity = warning

# CA1831: Use AsSpan or AsMemory instead of Range-based indexers when appropriate
dotnet_diagnostic.CA1831.severity = warning

# CA1832: Use AsSpan or AsMemory instead of Range-based indexers when appropriate
dotnet_diagnostic.CA1832.severity = warning

# CA1833: Use AsSpan or AsMemory instead of Range-based indexers when appropriate
dotnet_diagnostic.CA1833.severity = warning

# CA1834: Consider using 'StringBuilder.Append(char)' when applicable
dotnet_diagnostic.CA1834.severity = warning

# CA1835: Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'
dotnet_diagnostic.CA1835.severity = warning

# CA1836: Prefer IsEmpty over Count
dotnet_diagnostic.CA1836.severity = warning

# CA1837: Use 'Environment.ProcessId'
dotnet_diagnostic.CA1837.severity = warning

# CA1838: Avoid 'StringBuilder' parameters for P/Invokes
dotnet_diagnostic.CA1838.severity = warning

# CA1839: Use 'Environment.ProcessPath'
dotnet_diagnostic.CA1839.severity = warning

# CA1840: Use 'Environment.CurrentManagedThreadId'
dotnet_diagnostic.CA1840.severity = warning

# CA1841: Prefer Dictionary.Contains methods
dotnet_diagnostic.CA1841.severity = warning

# CA1842: Do not use 'WhenAll' with a single task
dotnet_diagnostic.CA1842.severity = warning

# CA1843: Do not use 'WaitAll' with a single task
dotnet_diagnostic.CA1843.severity = warning

# CA1844: Provide memory-based overrides of async methods when subclassing 'Stream'
dotnet_diagnostic.CA1844.severity = warning

# CA1845: Use span-based 'string.Concat'
dotnet_diagnostic.CA1845.severity = warning

# CA1846: Prefer 'AsSpan' over 'Substring'
dotnet_diagnostic.CA1846.severity = warning

# CA1847: Use char literal for a single character lookup
dotnet_diagnostic.CA1847.severity = warning

# CA1848: Use the LoggerMessage delegates
dotnet_diagnostic.CA1848.severity = warning

# CA1849: Call async methods when in an async method
dotnet_diagnostic.CA1849.severity = warning

# CA2000: Dispose objects before losing scope
dotnet_diagnostic.CA2000.severity = warning

# CA2002: Do not lock on objects with weak identity
dotnet_diagnostic.CA2002.severity = warning

# CA2007: Consider calling ConfigureAwait on the awaited task
dotnet_diagnostic.CA2007.severity = warning

# CA2008: Do not create tasks without passing a TaskScheduler
dotnet_diagnostic.CA2008.severity = warning

# CA2009: Do not call ToImmutableCollection on an ImmutableCollection value
dotnet_diagnostic.CA2009.severity = warning

# CA2011: Avoid infinite recursion
dotnet_diagnostic.CA2011.severity = warning

# CA2012: Use ValueTasks correctly
dotnet_diagnostic.CA2012.severity = warning

# CA2013: Do not use ReferenceEquals with value types
dotnet_diagnostic.CA2013.severity = warning

# CA2014: Do not use stackalloc in loops
dotnet_diagnostic.CA2014.severity = warning

# CA2015: Do not define finalizers for types derived from MemoryManager<T>
dotnet_diagnostic.CA2015.severity = warning

# CA2016: Forward the 'CancellationToken' parameter to methods
dotnet_diagnostic.CA2016.severity = warning

# CA2017: Parameter count mismatch
dotnet_diagnostic.CA2017.severity = warning

# CA2018: 'Buffer.BlockCopy' expects the number of bytes to be copied for the 'count' argument
dotnet_diagnostic.CA2018.severity = warning

# CA2100: Review SQL queries for security vulnerabilities
dotnet_diagnostic.CA2100.severity = warning

# CA2101: Specify marshaling for P/Invoke string arguments
dotnet_diagnostic.CA2101.severity = warning

# CA2109: Review visible event handlers
dotnet_diagnostic.CA2109.severity = warning

# CA2119: Seal methods that satisfy private interfaces
dotnet_diagnostic.CA2119.severity = warning

# CA2153: Do Not Catch Corrupted State Exceptions
dotnet_diagnostic.CA2153.severity = warning

# CA2200: Rethrow to preserve stack details
dotnet_diagnostic.CA2200.severity = warning

# CA2201: Do not raise reserved exception types
dotnet_diagnostic.CA2201.severity = warning

# CA2207: Initialize value type static fields in-line
dotnet_diagnostic.CA2207.severity = warning

# CA2208: Instantiate argument exceptions correctly
dotnet_diagnostic.CA2208.severity = warning

# CA2211: Non-constant fields should not be visible
dotnet_diagnostic.CA2211.severity = warning

# CA2213: Disposable fields should be disposed
dotnet_diagnostic.CA2213.severity = warning

# CA2214: Do not call overridable methods in constructors
dotnet_diagnostic.CA2214.severity = warning

# CA2215: Dispose methods should call base class dispose
dotnet_diagnostic.CA2215.severity = warning

# CA2216: Disposable types should declare finalizer
dotnet_diagnostic.CA2216.severity = warning

# CA2217: Do not mark enums with FlagsAttribute
dotnet_diagnostic.CA2217.severity = warning

# CA2218: Override GetHashCode on overriding Equals
dotnet_diagnostic.CA2218.severity = warning

# CA2219: Do not raise exceptions in finally clauses
dotnet_diagnostic.CA2219.severity = warning

# CA2224: Override Equals on overloading operator equals
dotnet_diagnostic.CA2224.severity = warning

# CA2225: Operator overloads have named alternates
dotnet_diagnostic.CA2225.severity = warning

# CA2226: Operators should have symmetrical overloads
dotnet_diagnostic.CA2226.severity = warning

# CA2227: Collection properties should be read only
dotnet_diagnostic.CA2227.severity = warning

# CA2229: Implement serialization constructors
dotnet_diagnostic.CA2229.severity = warning

# CA2231: Overload operator equals on overriding value type Equals
dotnet_diagnostic.CA2231.severity = warning

# CA2234: Pass system uri objects instead of strings
dotnet_diagnostic.CA2234.severity = warning

# CA2235: Mark all non-serializable fields
dotnet_diagnostic.CA2235.severity = warning

# CA2237: Mark ISerializable types with serializable
dotnet_diagnostic.CA2237.severity = warning

# CA2241: Provide correct arguments to formatting methods
dotnet_diagnostic.CA2241.severity = warning

# CA2242: Test for NaN correctly
dotnet_diagnostic.CA2242.severity = warning

# CA2243: Attribute string literals should parse correctly
dotnet_diagnostic.CA2243.severity = warning

# CA2244: Do not duplicate indexed element initializations
dotnet_diagnostic.CA2244.severity = warning

# CA2245: Do not assign a property to itself
dotnet_diagnostic.CA2245.severity = warning

# CA2246: Assigning symbol and its member in the same statement
dotnet_diagnostic.CA2246.severity = warning

# CA2247: Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum
dotnet_diagnostic.CA2247.severity = warning

# CA2248: Provide correct 'enum' argument to 'Enum.HasFlag'
dotnet_diagnostic.CA2248.severity = warning

# CA2249: Consider using 'string.Contains' instead of 'string.IndexOf'
dotnet_diagnostic.CA2249.severity = warning

# CA2250: Use 'ThrowIfCancellationRequested'
dotnet_diagnostic.CA2250.severity = warning

# CA2251: Use 'string.Equals'
dotnet_diagnostic.CA2251.severity = warning

# CA2252: This API requires opting into preview features
dotnet_diagnostic.CA2252.severity = warning

# CA2253: Named placeholders should not be numeric values
dotnet_diagnostic.CA2253.severity = warning

# CA2254: Template should be a static expression
dotnet_diagnostic.CA2254.severity = warning

# CA2255: The 'ModuleInitializer' attribute should not be used in libraries
dotnet_diagnostic.CA2255.severity = warning

# CA2256: All members declared in parent interfaces must have an implementation in a DynamicInterfaceCastableImplementation-attributed interface
dotnet_diagnostic.CA2256.severity = warning

# CA2257: Members defined on an interface with the 'DynamicInterfaceCastableImplementationAttribute' should be 'static'
dotnet_diagnostic.CA2257.severity = warning

# CA2258: Providing a 'DynamicInterfaceCastableImplementation' interface in Visual Basic is unsupported
dotnet_diagnostic.CA2258.severity = warning

# CA2300: Do not use insecure deserializer BinaryFormatter
dotnet_diagnostic.CA2300.severity = warning

# CA2301: Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder
dotnet_diagnostic.CA2301.severity = warning

# CA2302: Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize
dotnet_diagnostic.CA2302.severity = warning

# CA2305: Do not use insecure deserializer LosFormatter
dotnet_diagnostic.CA2305.severity = warning

# CA2310: Do not use insecure deserializer NetDataContractSerializer
dotnet_diagnostic.CA2310.severity = warning

# CA2311: Do not deserialize without first setting NetDataContractSerializer.Binder
dotnet_diagnostic.CA2311.severity = warning

# CA2312: Ensure NetDataContractSerializer.Binder is set before deserializing
dotnet_diagnostic.CA2312.severity = warning

# CA2315: Do not use insecure deserializer ObjectStateFormatter
dotnet_diagnostic.CA2315.severity = warning

# CA2321: Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver
dotnet_diagnostic.CA2321.severity = warning

# CA2322: Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing
dotnet_diagnostic.CA2322.severity = warning

# CA2326: Do not use TypeNameHandling values other than None
dotnet_diagnostic.CA2326.severity = warning

# CA2327: Do not use insecure JsonSerializerSettings
dotnet_diagnostic.CA2327.severity = warning

# CA2328: Ensure that JsonSerializerSettings are secure
dotnet_diagnostic.CA2328.severity = warning

# CA2329: Do not deserialize with JsonSerializer using an insecure configuration
dotnet_diagnostic.CA2329.severity = warning

# CA2330: Ensure that JsonSerializer has a secure configuration when deserializing
dotnet_diagnostic.CA2330.severity = warning

# CA2350: Do not use DataTable.ReadXml() with untrusted data
dotnet_diagnostic.CA2350.severity = warning

# CA2351: Do not use DataSet.ReadXml() with untrusted data
dotnet_diagnostic.CA2351.severity = warning

# CA2352: Unsafe DataSet or DataTable in serializable type can be vulnerable to remote code execution attacks
dotnet_diagnostic.CA2352.severity = warning

# CA2353: Unsafe DataSet or DataTable in serializable type
dotnet_diagnostic.CA2353.severity = warning

# CA2354: Unsafe DataSet or DataTable in deserialized object graph can be vulnerable to remote code execution attacks
dotnet_diagnostic.CA2354.severity = warning

# CA2355: Unsafe DataSet or DataTable type found in deserializable object graph
dotnet_diagnostic.CA2355.severity = warning

# CA2356: Unsafe DataSet or DataTable type in web deserializable object graph
dotnet_diagnostic.CA2356.severity = warning

# CA2361: Ensure auto-generated class containing DataSet.ReadXml() is not used with untrusted data
dotnet_diagnostic.CA2361.severity = warning

# CA2362: Unsafe DataSet or DataTable in auto-generated serializable type can be vulnerable to remote code execution attacks
dotnet_diagnostic.CA2362.severity = warning

# CA3001: Review code for SQL injection vulnerabilities
dotnet_diagnostic.CA3001.severity = warning

# CA3002: Review code for XSS vulnerabilities
dotnet_diagnostic.CA3002.severity = warning

# CA3003: Review code for file path injection vulnerabilities
dotnet_diagnostic.CA3003.severity = warning

# CA3004: Review code for information disclosure vulnerabilities
dotnet_diagnostic.CA3004.severity = warning

# CA3005: Review code for LDAP injection vulnerabilities
dotnet_diagnostic.CA3005.severity = warning

# CA3006: Review code for process command injection vulnerabilities
dotnet_diagnostic.CA3006.severity = warning

# CA3007: Review code for open redirect vulnerabilities
dotnet_diagnostic.CA3007.severity = warning

# CA3008: Review code for XPath injection vulnerabilities
dotnet_diagnostic.CA3008.severity = warning

# CA3009: Review code for XML injection vulnerabilities
dotnet_diagnostic.CA3009.severity = warning

# CA3010: Review code for XAML injection vulnerabilities
dotnet_diagnostic.CA3010.severity = warning

# CA3011: Review code for DLL injection vulnerabilities
dotnet_diagnostic.CA3011.severity = warning

# CA3012: Review code for regex injection vulnerabilities
dotnet_diagnostic.CA3012.severity = warning

# CA3061: Do Not Add Schema By URL
dotnet_diagnostic.CA3061.severity = warning

# CA3075: Insecure DTD processing in XML
dotnet_diagnostic.CA3075.severity = warning

# CA3076: Insecure XSLT script processing.
dotnet_diagnostic.CA3076.severity = warning

# CA3077: Insecure Processing in API Design, XmlDocument and XmlTextReader
dotnet_diagnostic.CA3077.severity = warning

# CA3147: Mark Verb Handlers With Validate Antiforgery Token
dotnet_diagnostic.CA3147.severity = warning

# CA5350: Do Not Use Weak Cryptographic Algorithms
dotnet_diagnostic.CA5350.severity = warning

# CA5351: Do Not Use Broken Cryptographic Algorithms
dotnet_diagnostic.CA5351.severity = warning

# CA5358: Review cipher mode usage with cryptography experts
dotnet_diagnostic.CA5358.severity = warning

# CA5359: Do Not Disable Certificate Validation
dotnet_diagnostic.CA5359.severity = warning

# CA5360: Do Not Call Dangerous Methods In Deserialization
dotnet_diagnostic.CA5360.severity = warning

# CA5361: Do Not Disable SChannel Use of Strong Crypto
dotnet_diagnostic.CA5361.severity = warning

# CA5362: Potential reference cycle in deserialized object graph
dotnet_diagnostic.CA5362.severity = warning

# CA5363: Do Not Disable Request Validation
dotnet_diagnostic.CA5363.severity = warning

# CA5364: Do Not Use Deprecated Security Protocols
dotnet_diagnostic.CA5364.severity = warning

# CA5365: Do Not Disable HTTP Header Checking
dotnet_diagnostic.CA5365.severity = warning

# CA5366: Use XmlReader for 'DataSet.ReadXml()'
dotnet_diagnostic.CA5366.severity = warning

# CA5367: Do Not Serialize Types With Pointer Fields
dotnet_diagnostic.CA5367.severity = warning

# CA5368: Set ViewStateUserKey For Classes Derived From Page
dotnet_diagnostic.CA5368.severity = warning

# CA5369: Use XmlReader for 'XmlSerializer.Deserialize()'
dotnet_diagnostic.CA5369.severity = warning

# CA5370: Use XmlReader for XmlValidatingReader constructor
dotnet_diagnostic.CA5370.severity = warning

# CA5371: Use XmlReader for 'XmlSchema.Read()'
dotnet_diagnostic.CA5371.severity = warning

# CA5372: Use XmlReader for XPathDocument constructor
dotnet_diagnostic.CA5372.severity = warning

# CA5373: Do not use obsolete key derivation function
dotnet_diagnostic.CA5373.severity = warning

# CA5374: Do Not Use XslTransform
dotnet_diagnostic.CA5374.severity = warning

# CA5375: Do Not Use Account Shared Access Signature
dotnet_diagnostic.CA5375.severity = warning

# CA5376: Use SharedAccessProtocol HttpsOnly
dotnet_diagnostic.CA5376.severity = warning

# CA5377: Use Container Level Access Policy
dotnet_diagnostic.CA5377.severity = warning

# CA5378: Do not disable ServicePointManagerSecurityProtocols
dotnet_diagnostic.CA5378.severity = warning

# CA5379: Ensure Key Derivation Function algorithm is sufficiently strong
dotnet_diagnostic.CA5379.severity = warning

# CA5380: Do Not Add Certificates To Root Store
dotnet_diagnostic.CA5380.severity = warning

# CA5381: Ensure Certificates Are Not Added To Root Store
dotnet_diagnostic.CA5381.severity = warning

# CA5382: Use Secure Cookies In ASP.NET Core
dotnet_diagnostic.CA5382.severity = warning

# CA5383: Ensure Use Secure Cookies In ASP.NET Core
dotnet_diagnostic.CA5383.severity = warning

# CA5384: Do Not Use Digital Signature Algorithm (DSA)
dotnet_diagnostic.CA5384.severity = warning

# CA5385: Use Rivest–Shamir–Adleman (RSA) Algorithm With Sufficient Key Size
dotnet_diagnostic.CA5385.severity = warning

# CA5386: Avoid hard-coding SecurityProtocolType value
dotnet_diagnostic.CA5386.severity = warning

# CA5387: Do Not Use Weak Key Derivation Function With Insufficient Iteration Count
dotnet_diagnostic.CA5387.severity = warning

# CA5388: Ensure Sufficient Iteration Count When Using Weak Key Derivation Function
dotnet_diagnostic.CA5388.severity = warning

# CA5389: Do Not Add Archive Item's Path To The Target File System Path
dotnet_diagnostic.CA5389.severity = warning

# CA5390: Do not hard-code encryption key
dotnet_diagnostic.CA5390.severity = warning

# CA5391: Use antiforgery tokens in ASP.NET Core MVC controllers
dotnet_diagnostic.CA5391.severity = warning

# CA5392: Use DefaultDllImportSearchPaths attribute for P/Invokes
dotnet_diagnostic.CA5392.severity = warning

# CA5393: Do not use unsafe DllImportSearchPath value
dotnet_diagnostic.CA5393.severity = warning

# CA5394: Do not use insecure randomness
dotnet_diagnostic.CA5394.severity = warning

# CA5395: Miss HttpVerb attribute for action methods
dotnet_diagnostic.CA5395.severity = warning

# CA5396: Set HttpOnly to true for HttpCookie
dotnet_diagnostic.CA5396.severity = warning

# CA5397: Do not use deprecated SslProtocols values
dotnet_diagnostic.CA5397.severity = warning

# CA5398: Avoid hard-coded SslProtocols values
dotnet_diagnostic.CA5398.severity = warning

# CA5399: HttpClients should enable certificate revocation list checks
dotnet_diagnostic.CA5399.severity = warning

# CA5400: Ensure HttpClient certificate revocation list check is not disabled
dotnet_diagnostic.CA5400.severity = warning

# CA5401: Do not use CreateEncryptor with non-default IV
dotnet_diagnostic.CA5401.severity = warning

# CA5402: Use CreateEncryptor with the default IV 
dotnet_diagnostic.CA5402.severity = warning

#
# Sonar C# analyzer rules
#

# S100: Methods and properties should be named in PascalCase
dotnet_diagnostic.S100.severity = warning

# S101: Types should be named in PascalCase
dotnet_diagnostic.S101.severity = warning

# S103: Lines should not be too long
dotnet_diagnostic.S103.severity = warning

# S104: Files should not have too many lines of code
dotnet_diagnostic.S104.severity = warning

# S105: Tabulation characters should not be used
dotnet_diagnostic.S105.severity = warning

# S106: Standard outputs should not be used directly to log anything
dotnet_diagnostic.S106.severity = warning

# S107: Methods should not have too many parameters
dotnet_diagnostic.S107.severity = warning

# S108: Nested blocks of code should not be left empty
dotnet_diagnostic.S108.severity = warning

# S109: Magic numbers should not be used
dotnet_diagnostic.S109.severity = warning

# S110: Inheritance tree of classes should not be too deep
dotnet_diagnostic.S110.severity = warning

# S112: General exceptions should never be thrown
dotnet_diagnostic.S112.severity = warning

# S113: Files should contain an empty newline at the end
# Initial Justification: one or more of our tools are stripping the end-newline. (mwp)
dotnet_diagnostic.S113.severity = none

# S121: Control structures should use curly braces
dotnet_diagnostic.S121.severity = warning

# S122: Statements should be on separate lines
dotnet_diagnostic.S122.severity = warning

# S125: Sections of code should not be commented out
# Initial Justification: This rule is well intended but it flags too many comments (too many false positives). (mwp)
dotnet_diagnostic.S125.severity = none

# S126: "if ... else if" constructs should end with "else" clauses
# Initial justification: this just doesn't work in today's code, the trailing else is often empty and optimized away by R#. (mwp)
dotnet_diagnostic.S126.severity = none

# S127: "for" loop stop conditions should be invariant
dotnet_diagnostic.S127.severity = warning

# S131: "switch/Select" statements should contain a "default/Case Else" clauses
dotnet_diagnostic.S131.severity = warning

# S134: Control flow statements "if", "switch", "for", "foreach", "while", "do"  and "try" should not be nested too deeply
# Initial justification: configured to 3 which is just too tight for some code. (mwp)
dotnet_diagnostic.S134.severity = none

# S138: Functions should not have too many lines of code
dotnet_diagnostic.S138.severity = warning

# S818: Literal suffixes should be upper case
dotnet_diagnostic.S818.severity = warning

# S881: Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression
dotnet_diagnostic.S881.severity = warning

# S907: "goto" statement should not be used
dotnet_diagnostic.S907.severity = warning

# S927: Parameter names should match base declaration and other partial definitions
dotnet_diagnostic.S927.severity = warning

# S1006: Method overrides should not change parameter defaults
dotnet_diagnostic.S1006.severity = warning

# S1048: Destructors should not throw exceptions
dotnet_diagnostic.S1048.severity = warning

# S1066: Collapsible "if" statements should be merged
dotnet_diagnostic.S1066.severity = warning

# S1067: Expressions should not be too complex
dotnet_diagnostic.S1067.severity = warning

# S1075: URIs should not be hardcoded
dotnet_diagnostic.S1075.severity = warning

# S1104: Fields should not have public accessibility
dotnet_diagnostic.S1104.severity = warning

# S1109: A close curly brace should be located at the beginning of a line
dotnet_diagnostic.S1109.severity = warning

# S1110: Redundant pairs of parentheses should be removed
dotnet_diagnostic.S1110.severity = warning

# S1116: Empty statements should be removed
dotnet_diagnostic.S1116.severity = warning

# S1117: Local variables should not shadow class fields
dotnet_diagnostic.S1117.severity = warning

# S1118: Utility classes should not have public constructors
dotnet_diagnostic.S1118.severity = warning

# S1121: Assignments should not be made from within sub-expressions
dotnet_diagnostic.S1121.severity = warning

# S1123: "Obsolete" attributes should include explanations
dotnet_diagnostic.S1123.severity = warning

# S1125: Boolean literals should not be redundant
dotnet_diagnostic.S1125.severity = warning

# S1128: Unused "using" should be removed
# Initial justification: optimzed away by the compiler. (mwp)
dotnet_diagnostic.S1128.severity = none

# S1134: Track uses of "FIXME" tags
dotnet_diagnostic.S1134.severity = warning

# S1135: Track uses of "TODO" tags
# Initial justification:  this rule tracks uses of TODO tags,  We treat warnings as errors on build, we have "TODO explorer" and search, thus this rule is not needed
dotnet_diagnostic.S1135.severity = none

# S1144: Unused private types or members should be removed
dotnet_diagnostic.S1144.severity = warning

# S1147: Exit methods should not be called
dotnet_diagnostic.S1147.severity = warning

# S1151: "switch case" clauses should not have too many lines of code
dotnet_diagnostic.S1151.severity = warning

# S1155: "Any()" should be used to test for emptiness
dotnet_diagnostic.S1155.severity = warning

# S1163: Exceptions should not be thrown in finally blocks
dotnet_diagnostic.S1163.severity = warning

# S1168: Empty arrays and collections should be returned instead of null
dotnet_diagnostic.S1168.severity = warning

# S1172: Unused method parameters should be removed
dotnet_diagnostic.S1172.severity = warning

# S1185: Overriding members should do more than simply call the same member in the base class
dotnet_diagnostic.S1185.severity = warning

# S1186: Methods should not be empty
dotnet_diagnostic.S1186.severity = warning

# S1192: String literals should not be duplicated
dotnet_diagnostic.S1192.severity = warning

# S1199: Nested code blocks should not be used
dotnet_diagnostic.S1199.severity = warning

# S1200: Classes should not be coupled to too many other classes (Single Responsibility Principle)
dotnet_diagnostic.S1200.severity = warning

# S1206: "Equals(Object)" and "GetHashCode()" should be overridden in pairs
dotnet_diagnostic.S1206.severity = warning

# S1210: "Equals" and the comparison operators should be overridden when implementing "IComparable"
dotnet_diagnostic.S1210.severity = warning

# S1215: "GC.Collect" should not be called
dotnet_diagnostic.S1215.severity = warning

# S1226: Method parameters, caught exceptions and foreach variables' initial values should not be ignored
dotnet_diagnostic.S1226.severity = warning

# S1227: break statements should not be used except for switch cases
# Initial Justification: We disagree with implementation, in light of Lint there are lots un unindexed collections, no need to continue to enumerate after the matching value is found. (mwp)
dotnet_diagnostic.S1227.severity = none

# S1244: Floating point numbers should not be tested for equality
dotnet_diagnostic.S1244.severity = warning

# S1264: A "while" loop should be used instead of a "for" loop
dotnet_diagnostic.S1264.severity = warning

# S1301: "switch" statements should have at least 3 "case" clauses
# Initial Justification: We disagree with implementation. (mwp)
dotnet_diagnostic.S1301.severity = none

# S1309: Track uses of in-source issue suppressions
# Initial Justification: we track these in a separate process that does not break the build. (mwp)
dotnet_diagnostic.S1309.severity = none

# S1313: Using hardcoded IP addresses is security-sensitive
dotnet_diagnostic.S1313.severity = warning

# S1449: Culture should be specified for "string" operations
dotnet_diagnostic.S1449.severity = warning

# S1450: Private fields only used as local variables in methods should become local variables
dotnet_diagnostic.S1450.severity = warning

# S1451: Track lack of copyright and license headers
# Initial Justification: Temporarily disabled pending strategy decision. (mwp)
dotnet_diagnostic.S1451.severity = none

# S1479: "switch" statements should not have too many "case" clauses
dotnet_diagnostic.S1479.severity = warning

# S1481: Unused local variables should be removed
dotnet_diagnostic.S1481.severity = warning

# S1541: Methods and properties should not be too complex
dotnet_diagnostic.S1541.severity = warning

# S1607: Tests should not be ignored
dotnet_diagnostic.S1607.severity = warning

# S1643: Strings should not be concatenated using '+' in a loop
dotnet_diagnostic.S1643.severity = warning

# S1656: Variables should not be self-assigned
dotnet_diagnostic.S1656.severity = warning

# S1659: Multiple variables should not be declared on the same line
dotnet_diagnostic.S1659.severity = warning

# S1694: An abstract class should have both abstract and concrete methods
# Initial Justification: when using the programming to interface style of programming, abstract class represent default implementation of capacities defined by interfaces. (mwp)
dotnet_diagnostic.S1694.severity = none

# S1696: NullReferenceException should not be caught
dotnet_diagnostic.S1696.severity = warning

# S1698: "==" should not be used when "Equals" is overridden
dotnet_diagnostic.S1698.severity = warning

# S1699: Constructors should only call non-overridable methods
dotnet_diagnostic.S1699.severity = warning

# S1751: Loops with at most one iteration should be refactored
dotnet_diagnostic.S1751.severity = warning

# S1764: Identical expressions should not be used on both sides of a binary operator
dotnet_diagnostic.S1764.severity = warning

# S1821: "switch" statements should not be nested
dotnet_diagnostic.S1821.severity = warning

# S1848: Objects should not be created to be dropped immediately without being used
dotnet_diagnostic.S1848.severity = warning

# S1854: Unused assignments should be removed
dotnet_diagnostic.S1854.severity = warning

# S1858: "ToString()" calls should not be redundant
dotnet_diagnostic.S1858.severity = warning

# S1862: Related "if/else if" statements should not have the same condition
dotnet_diagnostic.S1862.severity = warning

# S1871: Two branches in a conditional structure should not have exactly the same implementation
dotnet_diagnostic.S1871.severity = warning

# S1905: Redundant casts should not be used
dotnet_diagnostic.S1905.severity = warning

# S1939: Inheritance list should not be redundant
dotnet_diagnostic.S1939.severity = none

# S1940: Boolean checks should not be inverted
dotnet_diagnostic.S1940.severity = warning

# S1944: Inappropriate casts should not be made
dotnet_diagnostic.S1944.severity = warning

# S1994: "for" loop increment clauses should modify the loops' counters
dotnet_diagnostic.S1994.severity = warning

# S2053: Hashes should include an unpredictable salt
dotnet_diagnostic.S2053.severity = warning

# S2068: Hard-coded credentials are security-sensitive
dotnet_diagnostic.S2068.severity = warning

# S2077: Formatting SQL queries is security-sensitive
dotnet_diagnostic.S2077.severity = warning

# S2092: Creating cookies without the "secure" flag is security-sensitive
dotnet_diagnostic.S2092.severity = warning

# S2114: Collections should not be passed as arguments to their own methods
dotnet_diagnostic.S2114.severity = warning

# S2115: A secure password should be used when connecting to a database
dotnet_diagnostic.S2115.severity = warning

# S2123: Values should not be uselessly incremented
dotnet_diagnostic.S2123.severity = warning

# S2148: Underscores should be used to make large numbers readable
dotnet_diagnostic.S2148.severity = warning

# S2156: "sealed" classes should not have "protected" members
dotnet_diagnostic.S2156.severity = warning

# S2178: Short-circuit logic should be used in boolean contexts
dotnet_diagnostic.S2178.severity = warning

# S2183: Integral numbers should not be shifted by zero or more than their number of bits-1
dotnet_diagnostic.S2183.severity = warning

# S2184: Results of integer division should not be assigned to floating point variables
dotnet_diagnostic.S2184.severity = warning

# S2187: TestCases should contain tests
dotnet_diagnostic.S2187.severity = warning

# S2190: Recursion should not be infinite
dotnet_diagnostic.S2190.severity = warning

# S2197: Modulus results should not be checked for direct equality
dotnet_diagnostic.S2197.severity = warning

# S2201: Return values from functions without side effects should not be ignored
dotnet_diagnostic.S2201.severity = warning

# S2219: Runtime type checking should be simplified
dotnet_diagnostic.S2219.severity = warning

# S2221: "Exception" should not be caught when not required by called methods
dotnet_diagnostic.S2221.severity = warning

# S2222: Locks should be released
dotnet_diagnostic.S2222.severity = warning

# S2223: Non-constant static fields should not be visible
dotnet_diagnostic.S2223.severity = warning

# S2225: "ToString()" method should not return null
dotnet_diagnostic.S2225.severity = warning

# S2228: Console logging should not be used
dotnet_diagnostic.S2228.severity = warning

# S2234: Parameters should be passed in the correct order
dotnet_diagnostic.S2234.severity = warning

# S2245: Using pseudorandom number generators (PRNGs) is security-sensitive
dotnet_diagnostic.S2245.severity = warning

# S2251: A "for" loop update clause should move the counter in the right direction
dotnet_diagnostic.S2251.severity = warning

# S2252: For-loop conditions should be true at least once
dotnet_diagnostic.S2252.severity = warning

# S2255: Writing cookies is security-sensitive
dotnet_diagnostic.S2255.severity = warning

# S2257: Using non-standard cryptographic algorithms is security-sensitive
dotnet_diagnostic.S2257.severity = warning

# S2259: Null pointers should not be dereferenced
dotnet_diagnostic.S2259.severity = warning

# S2275: Composite format strings should not lead to unexpected behavior at runtime
dotnet_diagnostic.S2275.severity = warning

# S2290: Field-like events should not be virtual
dotnet_diagnostic.S2290.severity = warning

# S2291: Overflow checking should not be disabled for "Enumerable.Sum"
dotnet_diagnostic.S2291.severity = warning

# S2292: Trivial properties should be auto-implemented
dotnet_diagnostic.S2292.severity = warning

# S2302: "nameof" should be used
dotnet_diagnostic.S2302.severity = warning

# S2306: "async" and "await" should not be used as identifiers
dotnet_diagnostic.S2306.severity = warning

# S2325: Methods and properties that don't access instance data should be static
# Initial Justification:  Enforcing this rule causes breaking changes to be introduced over time (mwp)
dotnet_diagnostic.S2325.severity = none

# S2326: Unused type parameters should be removed
dotnet_diagnostic.S2326.severity = warning

# S2327: "try" statements with identical "catch" and/or "finally" blocks should be merged
dotnet_diagnostic.S2327.severity = warning

# S2328: "GetHashCode" should not reference mutable fields
# Initial Justification: The implementer of the collection should guard against unknown mutations. (mwp)
dotnet_diagnostic.S2328.severity = none

# S2330: Array covariance should not be used
dotnet_diagnostic.S2330.severity = warning

# S2333: Redundant modifiers should not be used
dotnet_diagnostic.S2333.severity = warning

# S2339: Public constant members should not be used
# Initial Justification: This rule is well-intentioned but fails to recognize the limitations (cannot use in Attributes, cannot use in switch statements, ...). (mwp)
dotnet_diagnostic.S2339.severity = none

# S2342: Enumeration types should comply with a naming convention
dotnet_diagnostic.S2342.severity = warning

# S2344: Enumeration type names should not have "Flags" or "Enum" suffixes
dotnet_diagnostic.S2344.severity = warning

# S2345: Flags enumerations should explicitly initialize all their members
dotnet_diagnostic.S2345.severity = warning

# S2346: Flags enumerations zero-value members should be named "None"
dotnet_diagnostic.S2346.severity = warning

# S2357: Fields should be private
dotnet_diagnostic.S2357.severity = warning

# S2360: Optional parameters should not be used
dotnet_diagnostic.S2360.severity = warning

# S2365: Properties should not make collection or array copies
dotnet_diagnostic.S2365.severity = warning

# S2368: Public methods should not have multidimensional array parameters
dotnet_diagnostic.S2368.severity = warning

# S2372: Exceptions should not be thrown from property getters
dotnet_diagnostic.S2372.severity = warning

# S2376: Write-only properties should not be used
dotnet_diagnostic.S2376.severity = warning

# S2386: Mutable fields should not be "public static"
dotnet_diagnostic.S2386.severity = warning

# S2387: Child class fields should not shadow parent class fields
dotnet_diagnostic.S2387.severity = warning

# S2436: Types and methods should not have too many generic parameters
dotnet_diagnostic.S2436.severity = warning

# S2437: Silly bit operations should not be performed
dotnet_diagnostic.S2437.severity = warning

# S2479: Whitespace and control characters in string literals should be explicit
dotnet_diagnostic.S2479.severity = warning

# S2486: Generic exceptions should not be ignored
dotnet_diagnostic.S2486.severity = warning

# S2551: Shared resources should not be used for locking
dotnet_diagnostic.S2551.severity = warning

# S2583: Conditionally executed code should be reachable
dotnet_diagnostic.S2583.severity = warning

# S2589: Boolean expressions should not be gratuitous
dotnet_diagnostic.S2589.severity = warning

# S2612: Setting loose file permissions is security-sensitive
dotnet_diagnostic.S2612.severity = warning

# S2674: The length returned from a stream read should be checked
dotnet_diagnostic.S2674.severity = warning

# S2681: Multiline blocks should be enclosed in curly braces
dotnet_diagnostic.S2681.severity = warning

# S2688: "NaN" should not be used in comparisons
dotnet_diagnostic.S2688.severity = warning

# S2692: "IndexOf" checks should not be for positive numbers
dotnet_diagnostic.S2692.severity = warning

# S2696: Instance members should not write to "static" fields
dotnet_diagnostic.S2696.severity = warning

# S2699: Tests should include assertions
dotnet_diagnostic.S2699.severity = warning

# S2701: Literal boolean values should not be used in assertions
dotnet_diagnostic.S2701.severity = warning

# S2737: "catch" clauses should do more than rethrow
dotnet_diagnostic.S2737.severity = warning

# S2743: Static fields should not be used in generic types
dotnet_diagnostic.S2743.severity = warning

# S2755: XML parsers should not be vulnerable to XXE attacks
dotnet_diagnostic.S2755.severity = warning

# S2757: "=+" should not be used instead of "+="
dotnet_diagnostic.S2757.severity = warning

# S2760: Sequential tests should not check the same condition
dotnet_diagnostic.S2760.severity = warning

# S2761: Doubled prefix operators "!!" and "~~" should not be used
dotnet_diagnostic.S2761.severity = warning

# S2857: SQL keywords should be delimited by whitespace
dotnet_diagnostic.S2857.severity = warning

# S2930: "IDisposables" should be disposed
dotnet_diagnostic.S2930.severity = warning

# S2931: Classes with "IDisposable" members should implement "IDisposable"
dotnet_diagnostic.S2931.severity = warning

# S2933: Fields that are only assigned in the constructor should be "readonly"
dotnet_diagnostic.S2933.severity = warning

# S2934: Property assignments should not be made for "readonly" fields not constrained to reference types
dotnet_diagnostic.S2934.severity = warning

# S2952: Classes should "Dispose" of members from the classes' own "Dispose" methods
dotnet_diagnostic.S2952.severity = warning

# S2953: Methods named "Dispose" should implement "IDisposable.Dispose"
dotnet_diagnostic.S2953.severity = warning

# S2955: Generic parameters not constrained to reference types should not be compared to "null"
# Initial Justification: This rule forces breaking changes over time. (mwp)
dotnet_diagnostic.S2955.severity = none

# S2971: "IEnumerable" LINQs should be simplified
dotnet_diagnostic.S2971.severity = warning

# S2995: "Object.ReferenceEquals" should not be used for value types
dotnet_diagnostic.S2995.severity = warning

# S2996: "ThreadStatic" fields should not be initialized
dotnet_diagnostic.S2996.severity = warning

# S2997: "IDisposables" created in a "using" statement should not be returned
dotnet_diagnostic.S2997.severity = warning

# S3005: "ThreadStatic" should not be used on non-static fields
dotnet_diagnostic.S3005.severity = warning

# S3010: Static fields should not be updated in constructors
dotnet_diagnostic.S3010.severity = warning

# S3011: Reflection should not be used to increase accessibility of classes, methods, or fields
dotnet_diagnostic.S3011.severity = warning

# S3052: Members should not be initialized to default values
dotnet_diagnostic.S3052.severity = warning

# S3059: Types should not have members with visibility set higher than the type's visibility
# Initial Justification:  There is no point in breaking the build, either. (mwp)
dotnet_diagnostic.S3059.severity = none

# S3060: "is" should not be used with "this"
dotnet_diagnostic.S3060.severity = warning

# S3168: "async" methods should not return "void"
dotnet_diagnostic.S3168.severity = warning

# S3169: Multiple "OrderBy" calls should not be used
dotnet_diagnostic.S3169.severity = warning

# S3172: Delegates should not be subtracted
dotnet_diagnostic.S3172.severity = warning

# S3215: "interface" instances should not be cast to concrete types
# Initial Justification: This rule fires on as, not just unsafe casts. (mwp)
dotnet_diagnostic.S3215.severity = none

# S3216: "ConfigureAwait(false)" should be used
dotnet_diagnostic.S3216.severity = warning

# S3217: "Explicit" conversions of "foreach" loops should not be used
dotnet_diagnostic.S3217.severity = warning

# S3218: Inner class members should not shadow outer class "static" or type members
dotnet_diagnostic.S3218.severity = warning

# S3220: Method calls should not resolve ambiguously to overloads with "params"
dotnet_diagnostic.S3220.severity = warning

# S3234: "GC.SuppressFinalize" should not be invoked for types without destructors
dotnet_diagnostic.S3234.severity = warning

# S3235: Redundant parentheses should not be used
dotnet_diagnostic.S3235.severity = warning

# S3236: Caller information arguments should not be provided explicitly
dotnet_diagnostic.S3236.severity = warning

# S3237: "value" parameters should be used
dotnet_diagnostic.S3237.severity = warning

# S3240: The simplest possible condition syntax should be used
# Initial Justification: Application of this rule leads to truly complicated ternary expressions. (mwp)
dotnet_diagnostic.S3240.severity = none

# S3241: Methods should not return values that are never used
dotnet_diagnostic.S3241.severity = warning

# S3242: Method parameters should be declared with base types
dotnet_diagnostic.S3242.severity = warning

# S3244: Anonymous delegates should not be used to unsubscribe from Events
dotnet_diagnostic.S3244.severity = warning

# S3246: Generic type parameters should be co/contravariant when possible
dotnet_diagnostic.S3246.severity = warning

# S3247: Duplicate casts should not be made
dotnet_diagnostic.S3247.severity = warning

# S3249: Classes directly extending "object" should not call "base" in "GetHashCode" or "Equals"
dotnet_diagnostic.S3249.severity = warning

# S3251: Implementations should be provided for "partial" methods
dotnet_diagnostic.S3251.severity = warning

# S3253: Constructor and destructor declarations should not be redundant
# Initial Justification: Why break the build when the compler is just going to inject the code. (mwp)
dotnet_diagnostic.S3253.severity = none

# S3254: Default parameter values should not be passed as arguments
dotnet_diagnostic.S3254.severity = warning

# S3256: "string.IsNullOrEmpty" should be used
dotnet_diagnostic.S3256.severity = warning

# S3257: Declarations and initializations should be as concise as possible
dotnet_diagnostic.S3257.severity = warning

# S3260: Non-derived "private" classes and records should be "sealed"
dotnet_diagnostic.S3260.severity = warning

# S3261: Namespaces should not be empty
dotnet_diagnostic.S3261.severity = warning

# S3262: "params" should be used on overrides
dotnet_diagnostic.S3262.severity = warning

# S3263: Static fields should appear in the order they must be initialized 
dotnet_diagnostic.S3263.severity = warning

# S3264: Events should be invoked
dotnet_diagnostic.S3264.severity = warning

# S3265: Non-flags enums should not be used in bitwise operations
dotnet_diagnostic.S3265.severity = warning

# S3267: Loops should be simplified with "LINQ" expressions
# Initial Justification: this can lead to truly hard to understand code in non-simple loops. (mwp)
dotnet_diagnostic.S3267.severity = none

# S3329: Cipher Block Chaining IVs should be unpredictable
dotnet_diagnostic.S3329.severity = warning

# S3330: Creating cookies without the "HttpOnly" flag is security-sensitive
dotnet_diagnostic.S3330.severity = warning

# S3343: Caller information parameters should come at the end of the parameter list
dotnet_diagnostic.S3343.severity = warning

# S3346: Expressions used in "Debug.Assert" should not produce side effects
dotnet_diagnostic.S3346.severity = warning

# S3353: Unchanged local variables should be "const"
dotnet_diagnostic.S3353.severity = warning

# S3358: Ternary operators should not be nested
dotnet_diagnostic.S3358.severity = warning

# S3366: "this" should not be exposed from constructors
dotnet_diagnostic.S3366.severity = warning

# S3376: Attribute, EventArgs, and Exception type names should end with the type being extended
dotnet_diagnostic.S3376.severity = warning

# S3397: "base.Equals" should not be used to check for reference equality in "Equals" if "base" is not "object"
dotnet_diagnostic.S3397.severity = warning

# S3400: Methods should not return constants
dotnet_diagnostic.S3400.severity = warning

# S3415: Assertion arguments should be passed in the correct order
dotnet_diagnostic.S3415.severity = warning

# S3427: Method overloads with default parameter values should not overlap 
dotnet_diagnostic.S3427.severity = warning

# S3431: "[ExpectedException]" should not be used
dotnet_diagnostic.S3431.severity = warning

# S3433: Test method signatures should be correct
dotnet_diagnostic.S3433.severity = warning

# S3440: Variables should not be checked against the values they're about to be assigned
dotnet_diagnostic.S3440.severity = warning

# S3441: Redundant property names should be omitted in anonymous classes
dotnet_diagnostic.S3441.severity = warning

# S3442: "abstract" classes should not have "public" constructors
dotnet_diagnostic.S3442.severity = warning

# S3443: Type should not be examined on "System.Type" instances
dotnet_diagnostic.S3443.severity = warning

# S3444: Interfaces should not simply inherit from base interfaces with colliding members
dotnet_diagnostic.S3444.severity = warning

# S3445: Exceptions should not be explicitly rethrown
dotnet_diagnostic.S3445.severity = warning

# S3447: "[Optional]" should not be used on "ref" or "out" parameters
dotnet_diagnostic.S3447.severity = warning

# S3449: Right operands of shift operators should be integers
dotnet_diagnostic.S3449.severity = warning

# S3450: Parameters with "[DefaultParameterValue]" attributes should also be marked "[Optional]"
dotnet_diagnostic.S3450.severity = warning

# S3451: "[DefaultValue]" should not be used when "[DefaultParameterValue]" is meant
dotnet_diagnostic.S3451.severity = warning

# S3453: Classes should not have only "private" constructors
dotnet_diagnostic.S3453.severity = warning

# S3456: "string.ToCharArray()" should not be called redundantly
dotnet_diagnostic.S3456.severity = warning

# S3457: Composite format strings should be used correctly
dotnet_diagnostic.S3457.severity = warning

# S3458: Empty "case" clauses that fall through to the "default" should be omitted
dotnet_diagnostic.S3458.severity = warning

# S3459: Unassigned members should be removed
dotnet_diagnostic.S3459.severity = warning

# S3464: Type inheritance should not be recursive
dotnet_diagnostic.S3464.severity = warning

# S3466: Optional parameters should be passed to "base" calls
dotnet_diagnostic.S3466.severity = warning

# S3532: Empty "default" clauses should be removed
dotnet_diagnostic.S3532.severity = warning

# S3597: "ServiceContract" and "OperationContract" attributes should be used together
dotnet_diagnostic.S3597.severity = warning

# S3598: One-way "OperationContract" methods should have "void" return type
dotnet_diagnostic.S3598.severity = warning

# S3600: "params" should not be introduced on overrides
dotnet_diagnostic.S3600.severity = warning

# S3603: Methods with "Pure" attribute should return a value 
dotnet_diagnostic.S3603.severity = warning

# S3604: Member initializer values should not be redundant
dotnet_diagnostic.S3604.severity = warning

# S3610: Nullable type comparison should not be redundant
dotnet_diagnostic.S3610.severity = warning

# S3626: Jump statements should not be redundant
dotnet_diagnostic.S3626.severity = warning

# S3655: Empty nullable value should not be accessed
dotnet_diagnostic.S3655.severity = warning

# S3717: Track use of "NotImplementedException"
dotnet_diagnostic.S3717.severity = warning

# S3776: Cognitive Complexity of methods should not be too high
dotnet_diagnostic.S3776.severity = warning

# S3869: "SafeHandle.DangerousGetHandle" should not be called
dotnet_diagnostic.S3869.severity = warning

# S3871: Exception types should be "public"
dotnet_diagnostic.S3871.severity = warning

# S3872: Parameter names should not duplicate the names of their methods
dotnet_diagnostic.S3872.severity = warning

# S3874: "out" and "ref" parameters should not be used
# Initial Justification:  judgment call, not a hard and fast rule. (mwp)
dotnet_diagnostic.S3874.severity = none

# S3875: "operator==" should not be overloaded on reference types
dotnet_diagnostic.S3875.severity = warning

# S3876: Strings or integral types should be used for indexers
dotnet_diagnostic.S3876.severity = warning

# S3877: Exceptions should not be thrown from unexpected methods
dotnet_diagnostic.S3877.severity = warning

# S3880: Finalizers should not be empty
dotnet_diagnostic.S3880.severity = warning

# S3881: "IDisposable" should be implemented correctly
# Initial Justification:  Our reusable implementation DisposableObject violates this rule and has been reviewed. (mwp)
dotnet_diagnostic.S3881.severity = none

# S3884: "CoSetProxyBlanket" and "CoInitializeSecurity" should not be used
dotnet_diagnostic.S3884.severity = warning

# S3885: "Assembly.Load" should be used
dotnet_diagnostic.S3885.severity = warning

# S3887: Mutable, non-private fields should not be "readonly"
dotnet_diagnostic.S3887.severity = warning

# S3889: Neither "Thread.Resume" nor "Thread.Suspend" should be used
dotnet_diagnostic.S3889.severity = warning

# S3897: Classes that provide "Equals(<T>)" should implement "IEquatable<T>"
dotnet_diagnostic.S3897.severity = warning

# S3898: Value types should implement "IEquatable<T>"
dotnet_diagnostic.S3898.severity = warning

# S3900: Arguments of public methods should be validated against null
# Initial Justification:  Over inclusive.  Does not recognize ArgumentNotNull assertions. (mwp)
dotnet_diagnostic.S3900.severity = none

# S3902: "Assembly.GetExecutingAssembly" should not be called
dotnet_diagnostic.S3902.severity = warning

# S3903: Types should be defined in named namespaces
dotnet_diagnostic.S3903.severity = warning

# S3904: Assemblies should have version information
dotnet_diagnostic.S3904.severity = warning

# S3906: Event Handlers should have the correct signature
dotnet_diagnostic.S3906.severity = warning

# S3908: Generic event handlers should be used
dotnet_diagnostic.S3908.severity = warning

# S3909: Collections should implement the generic interface
dotnet_diagnostic.S3909.severity = warning

# S3923: All branches in a conditional structure should not have exactly the same implementation
dotnet_diagnostic.S3923.severity = warning

# S3925: "ISerializable" should be implemented correctly
# Initial Justification:  Too many false positives. (mwp)
dotnet_diagnostic.S3925.severity = none

# S3926: Deserialization methods should be provided for "OptionalField" members
dotnet_diagnostic.S3926.severity = warning

# S3927: Serialization event handlers should be implemented correctly
dotnet_diagnostic.S3927.severity = warning

# S3928: Parameter names used into ArgumentException constructors should match an existing one 
dotnet_diagnostic.S3928.severity = warning

# S3937: Number patterns should be regular
dotnet_diagnostic.S3937.severity = warning

# S3949: Calculations should not overflow
dotnet_diagnostic.S3949.severity = warning

# S3956: "Generic.List" instances should not be part of public APIs
dotnet_diagnostic.S3956.severity = warning

# S3962: "static readonly" constants should be "const" instead
dotnet_diagnostic.S3962.severity = warning

# S3963: "static" fields should be initialized inline
dotnet_diagnostic.S3963.severity = warning

# S3966: Objects should not be disposed more than once
dotnet_diagnostic.S3966.severity = warning

# S3967: Multidimensional arrays should not be used
dotnet_diagnostic.S3967.severity = warning

# S3971: "GC.SuppressFinalize" should not be called
dotnet_diagnostic.S3971.severity = warning

# S3972: Conditionals should start on new lines
dotnet_diagnostic.S3972.severity = warning

# S3973: A conditionally executed single line should be denoted by indentation
dotnet_diagnostic.S3973.severity = warning

# S3981: Collection sizes and array length comparisons should make sense
dotnet_diagnostic.S3981.severity = warning

# S3984: Exceptions should not be created without being thrown
dotnet_diagnostic.S3984.severity = warning

# S3990: Assemblies should be marked as CLS compliant
dotnet_diagnostic.S3990.severity = warning

# S3992: Assemblies should explicitly specify COM visibility
dotnet_diagnostic.S3992.severity = warning

# S3993: Custom attributes should be marked with "System.AttributeUsageAttribute"
dotnet_diagnostic.S3993.severity = warning

# S3994: URI Parameters should not be strings
dotnet_diagnostic.S3994.severity = warning

# S3995: URI return values should not be strings
dotnet_diagnostic.S3995.severity = warning

# S3996: URI properties should not be strings
dotnet_diagnostic.S3996.severity = warning

# S3997: String URI overloads should call "System.Uri" overloads
dotnet_diagnostic.S3997.severity = warning

# S3998: Threads should not lock on objects with weak identity
dotnet_diagnostic.S3998.severity = warning

# S4000: Pointers to unmanaged memory should not be visible
dotnet_diagnostic.S4000.severity = warning

# S4002: Disposable types should declare finalizers
dotnet_diagnostic.S4002.severity = warning

# S4004: Collection properties should be readonly
dotnet_diagnostic.S4004.severity = warning

# S4005: "System.Uri" arguments should be used instead of strings
dotnet_diagnostic.S4005.severity = warning

# S4015: Inherited member visibility should not be decreased
dotnet_diagnostic.S4015.severity = warning

# S4016: Enumeration members should not be named "Reserved"
dotnet_diagnostic.S4016.severity = warning

# S4017: Method signatures should not contain nested generic types
dotnet_diagnostic.S4017.severity = warning

# S4018: Generic methods should provide type parameters
# Initial Justification:  Creates too much duplicative code. (mwp)
dotnet_diagnostic.S4018.severity = none

# S4019: Base class methods should not be hidden
dotnet_diagnostic.S4019.severity = warning

# S4022: Enumerations should have "Int32" storage
dotnet_diagnostic.S4022.severity = warning

# S4023: Interfaces should not be empty
# Initial Justification:  Empty interfaces represent "is a". (mwp)
dotnet_diagnostic.S4023.severity = none

# S4025: Child class fields should not differ from parent class fields only by capitalization
dotnet_diagnostic.S4025.severity = warning

# S4026: Assemblies should be marked with "NeutralResourcesLanguageAttribute"
dotnet_diagnostic.S4026.severity = warning

# S4027: Exceptions should provide standard constructors
dotnet_diagnostic.S4027.severity = warning

# S4035: Classes implementing "IEquatable<T>" should be sealed
dotnet_diagnostic.S4035.severity = warning

# S4036: Searching OS commands in PATH is security-sensitive
dotnet_diagnostic.S4036.severity = warning

# S4039: Interface methods should be callable by derived types
dotnet_diagnostic.S4039.severity = warning

# S4040: Strings should be normalized to uppercase
dotnet_diagnostic.S4040.severity = warning

# S4041: Type names should not match namespaces
dotnet_diagnostic.S4041.severity = warning

# S4047: Generics should be used when appropriate
dotnet_diagnostic.S4047.severity = warning

# S4049: Properties should be preferred
# Initial Justification:  This is a jusdgment call (e.g. CPU expensive calculated properties) and not appropriate for an absolute rule. (mwp)
dotnet_diagnostic.S4049.severity = none

# S4050: Operators should be overloaded consistently
dotnet_diagnostic.S4050.severity = warning

# S4052: Types should not extend outdated base types
dotnet_diagnostic.S4052.severity = warning

# S4055: Literals should not be passed as localized parameters
# Initial Justification:  Too many positives with no return on investment to fix. (mwp)
dotnet_diagnostic.S4055.severity = none

# S4056: Overloads with a "CultureInfo" or an "IFormatProvider" parameter should be used
dotnet_diagnostic.S4056.severity = warning

# S4057: Locales should be set for data types
dotnet_diagnostic.S4057.severity = warning

# S4058: Overloads with a "StringComparison" parameter should be used
dotnet_diagnostic.S4058.severity = warning

# S4059: Property names should not match get methods
dotnet_diagnostic.S4059.severity = warning

# S4060: Non-abstract attributes should be sealed
dotnet_diagnostic.S4060.severity = warning

# S4061: "params" should be used instead of "varargs"
dotnet_diagnostic.S4061.severity = warning

# S4069: Operator overloads should have named alternatives
# # Initial Justification:  this rule expects "Compare" instead of "CompareTo". (mwp)
dotnet_diagnostic.S4069.severity = none

# S4070: Non-flags enums should not be marked with "FlagsAttribute"
dotnet_diagnostic.S4070.severity = warning

# S4136: Method overloads should be grouped together
# # Initial Justification:  This rule breaks down when multiple interfaces are implemented by a single class. (mwp)
dotnet_diagnostic.S4136.severity = none

# S4143: Collection elements should not be replaced unconditionally
dotnet_diagnostic.S4143.severity = warning

# S4144: Methods should not have identical implementations
dotnet_diagnostic.S4144.severity = warning

# S4158: Empty collections should not be accessed or iterated
dotnet_diagnostic.S4158.severity = warning

# S4159: Classes should implement their "ExportAttribute" interfaces
dotnet_diagnostic.S4159.severity = warning

# S4200: Native methods should be wrapped
dotnet_diagnostic.S4200.severity = warning

# S4201: Null checks should not be used with "is"
dotnet_diagnostic.S4201.severity = warning

# S4210: Windows Forms entry points should be marked with STAThread
dotnet_diagnostic.S4210.severity = warning

# S4211: Members should not have conflicting transparency annotations
dotnet_diagnostic.S4211.severity = warning

# S4212: Serialization constructors should be secured
dotnet_diagnostic.S4212.severity = warning

# S4214: "P/Invoke" methods should not be visible
dotnet_diagnostic.S4214.severity = warning

# S4220: Events should have proper arguments
dotnet_diagnostic.S4220.severity = warning

# S4225: Extension methods should not extend "object"
dotnet_diagnostic.S4225.severity = warning

# S4226: Extensions should be in separate namespaces
dotnet_diagnostic.S4226.severity = warning

# S4260: "ConstructorArgument" parameters should exist in constructors
dotnet_diagnostic.S4260.severity = warning

# S4261: Methods should be named according to their synchronicities
dotnet_diagnostic.S4261.severity = warning

# S4275: Getters and setters should access the expected fields
dotnet_diagnostic.S4275.severity = warning

# S4277: "Shared" parts should not be created with "new"
dotnet_diagnostic.S4277.severity = warning

# S4423: Weak SSL/TLS protocols should not be used
dotnet_diagnostic.S4423.severity = warning

# S4426: Cryptographic keys should be robust
dotnet_diagnostic.S4426.severity = warning

# S4428: "PartCreationPolicyAttribute" should be used with "ExportAttribute"
dotnet_diagnostic.S4428.severity = warning

# S4433: LDAP connections should be authenticated
dotnet_diagnostic.S4433.severity = warning

# S4456: Parameter validation in yielding methods should be wrapped
dotnet_diagnostic.S4456.severity = warning

# S4457: Parameter validation in "async"/"await" methods should be wrapped
dotnet_diagnostic.S4457.severity = warning

# S4462: Calls to "async" methods should not be blocking
dotnet_diagnostic.S4462.severity = warning

# S4487: Unread "private" fields should be removed
dotnet_diagnostic.S4487.severity = warning

# S4502: Disabling CSRF protections is security-sensitive
dotnet_diagnostic.S4502.severity = warning

# S4507: Delivering code in production with debug features activated is security-sensitive
dotnet_diagnostic.S4507.severity = warning

# S4524: "default" clauses should be first or last
dotnet_diagnostic.S4524.severity = warning

# S4564: ASP.NET HTTP request validation feature should not be disabled
dotnet_diagnostic.S4564.severity = warning

# S4581: "new Guid()" should not be used
dotnet_diagnostic.S4581.severity = warning

# S4583: Calls to delegate's method "BeginInvoke" should be paired with calls to "EndInvoke"
dotnet_diagnostic.S4583.severity = warning

# S4586: Non-async "Task/Task<T>" methods should not return null
dotnet_diagnostic.S4586.severity = warning

# S4635: String offset-based methods should be preferred for finding substrings from offsets
dotnet_diagnostic.S4635.severity = warning

# S4784: Using regular expressions is security-sensitive
dotnet_diagnostic.S4784.severity = warning

# S4787: Encrypting data is security-sensitive
dotnet_diagnostic.S4787.severity = warning

# S4790: Using weak hashing algorithms is security-sensitive
dotnet_diagnostic.S4790.severity = warning

# S4792: Configuring loggers is security-sensitive
dotnet_diagnostic.S4792.severity = warning

# S4818: Using Sockets is security-sensitive
dotnet_diagnostic.S4818.severity = warning

# S4823: Using command line arguments is security-sensitive
dotnet_diagnostic.S4823.severity = warning

# S4829: Reading the Standard Input is security-sensitive
dotnet_diagnostic.S4829.severity = warning

# S4830: Server certificates should be verified during SSL/TLS connections
dotnet_diagnostic.S4830.severity = warning

# S4834: Controlling permissions is security-sensitive
dotnet_diagnostic.S4834.severity = warning

# S5034: "ValueTask" should be consumed correctly
dotnet_diagnostic.S5034.severity = warning

# S5042: Expanding archive files without controlling resource consumption is security-sensitive
dotnet_diagnostic.S5042.severity = warning

# S5122: Having a permissive Cross-Origin Resource Sharing policy is security-sensitive
dotnet_diagnostic.S5122.severity = warning

# S5332: Using clear-text protocols is security-sensitive
dotnet_diagnostic.S5332.severity = warning

# S5443: Using publicly writable directories is security-sensitive
dotnet_diagnostic.S5443.severity = warning

# S5445: Insecure temporary file creation methods should not be used
dotnet_diagnostic.S5445.severity = warning

# S5542: Encryption algorithms should be used with secure mode and padding scheme
dotnet_diagnostic.S5542.severity = warning

# S5547: Cipher algorithms should be robust
dotnet_diagnostic.S5547.severity = warning

# S5659: JWT should be signed and verified with strong cipher algorithms
dotnet_diagnostic.S5659.severity = warning

# S5693: Allowing requests with excessive content length is security-sensitive
dotnet_diagnostic.S5693.severity = warning

# S5753: Disabling ASP.NET "Request Validation" feature is security-sensitive
dotnet_diagnostic.S5753.severity = warning

# S5766: Deserializing objects without performing data validation is security-sensitive
dotnet_diagnostic.S5766.severity = warning

# S5773: Types allowed to be deserialized should be restricted
dotnet_diagnostic.S5773.severity = warning

# S6354: Use a testable date/time provider
# Initial Justification:  This rule fires warnings on code that follows the guidance of the rule.  (mwp)
dotnet_diagnostic.S6354.severity = none

# S6419: Azure Functions should be stateless
dotnet_diagnostic.S6419.severity = warning

# S6420: Client instances should not be recreated on each Azure Function invocation
dotnet_diagnostic.S6420.severity = warning

# S6421: Azure Functions should use Structured Error Handling
dotnet_diagnostic.S6421.severity = warning

# S6422: Calls to "async" methods should not be blocking in Azure Functions
dotnet_diagnostic.S6422.severity = warning

# S6423: Azure Functions should log all failures
dotnet_diagnostic.S6423.severity = warning

# S6424: Interfaces for durable entities should satisfy the restrictions
dotnet_diagnostic.S6424.severity = warning

# S9999 is NOT configurable, this includes Copy-paste token calculator, Log generator, and File metadata generator, Metrics calculator, Symbol reference calculator, adn Token type calculator
